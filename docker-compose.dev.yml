version: "3.8"

services:
#  nginx:
#    container_name: nginx
#    image: nginx:alpine
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      web:
#        condition: service_healthy
#    volumes:
#      - ./nginx.dev.conf:/etc/nginx/conf.d/default.conf
#      - ./ssl/ssl.crt:/etc/nginx/ssl/ssl.crt
#      - ./ssl/ssl.key:/etc/nginx/ssl/ssl.key
#    networks:
#      - net
  nginxproxymanager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./nginx/data/:/data
      - ./nginx/letsencrypt:/etc/letsencrypt
    depends_on:
      web:
        condition: service_healthy
    networks:
      - net

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:alpine
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_PORT=${DB_PORT}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data
    # - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h localhost" ]
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - net

  redis:
    container_name: redis
    user: 1000:1001
    # sudo adduser username
    # id -u username
    # id -g username
    hostname: redis
    image: redis:alpine
    restart: always
    volumes:
      - ./data/redis/:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 5s
      retries: 10
      start_period: 5s
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    networks:
      - net

  #  rabbitmq:
  #    container_name: rabbitmq
  #    hostname: rabbitmq
  #    build:
  #      context: backend
  #      dockerfile: DockerfileRabbitMQ
  #    ports:
  #      - "5672:5672"
  #      - "15672:15672"
  #    environment:
  #      RABBITMQ_DEFAULT_USER: guest
  #      RABBITMQ_DEFAULT_PASS: guest
  #    volumes:
  #      - ./data/rabbitmq:/var/lib/rabbitmq
  #      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
  #    healthcheck:
  #      test: [ "CMD-SHELL", "rabbitmq-diagnostics ping" ]
  #      interval: 30s
  #      timeout: 10s
  #      retries: 5
  #    networks:
  #      - net

  react:
    container_name: react
    command: sh -c "npm run build"
    build:
      context: .
      dockerfile: DockerfileReact
    volumes:
      - ./frontend/build/:/srv/build


  web:
    container_name: web
    hostname: web
    build:
      context: .
      dockerfile: Dockerfile
      target: project
    environment:
      - LOG_PREFIX=server
    volumes:
      - ./data:/srv/data
      - ./logs:/srv/logs
      - ./frontend/build/:/srv/frontend/build
    ports:
      - "8000:8000"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://web:8000/health_test/ || exit 1" ]
#      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 5s
    depends_on:
      redis:
        condition: service_healthy
      #      rabbitmq:
      #        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      react:
        condition: service_completed_successfully
    cap_add:
      - SYS_TIME
    networks:
      - net

  celery:
    container_name: celery
    hostname: celery
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
      target: celery
    volumes:
      - ./data:/srv/data
      - ./logs:/srv/logs
      - ./entrypoint_celery.sh:/srv/entrypoint_celery.sh
    links:
      - redis
    environment:
      - LOG_PREFIX=celery
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - net

  minio:
    container_name: minio
    hostname: minio
    build:
      context: .
      dockerfile: DockerfileMinio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: sh -c "/data/entrypoint_minio.sh && minio server /data --console-address :9001"
    volumes:
      - ./data/minio/data:/data
      - ./data/minio/config:/root/.minio
      - ./entrypoint_minio.sh:/opt/entrypoint_minio.sh
    # - ./ssl/ssl.crt:/root/.minio/certs/public.crt
    # - ./ssl/ssl.key:/root/.minio/certs/private.key
    networks:
      - net
    healthcheck:
      test: [ "CMD", "echo", "'MinIO is up'" ]
      timeout: 4s
      retries: 10
      start_period: 5s

networks:
  net:
    driver: bridge
